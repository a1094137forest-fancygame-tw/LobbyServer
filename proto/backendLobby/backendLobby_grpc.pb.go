// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: backendLobby.proto

package backendLobby

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Lobby_GetMemberList_FullMethodName = "/backendLobby.Lobby/GetMemberList"
	Lobby_SetMemberData_FullMethodName = "/backendLobby.Lobby/SetMemberData"
	Lobby_KickOutMember_FullMethodName = "/backendLobby.Lobby/KickOutMember"
)

// LobbyClient is the client API for Lobby service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LobbyClient interface {
	GetMemberList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetMemberListRes, error)
	SetMemberData(ctx context.Context, in *SetMember, opts ...grpc.CallOption) (*SetMemberRes, error)
	KickOutMember(ctx context.Context, in *KickOutMemberInfo, opts ...grpc.CallOption) (*KickOutMemberRes, error)
}

type lobbyClient struct {
	cc grpc.ClientConnInterface
}

func NewLobbyClient(cc grpc.ClientConnInterface) LobbyClient {
	return &lobbyClient{cc}
}

func (c *lobbyClient) GetMemberList(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetMemberListRes, error) {
	out := new(GetMemberListRes)
	err := c.cc.Invoke(ctx, Lobby_GetMemberList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SetMemberData(ctx context.Context, in *SetMember, opts ...grpc.CallOption) (*SetMemberRes, error) {
	out := new(SetMemberRes)
	err := c.cc.Invoke(ctx, Lobby_SetMemberData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) KickOutMember(ctx context.Context, in *KickOutMemberInfo, opts ...grpc.CallOption) (*KickOutMemberRes, error) {
	out := new(KickOutMemberRes)
	err := c.cc.Invoke(ctx, Lobby_KickOutMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LobbyServer is the server API for Lobby service.
// All implementations must embed UnimplementedLobbyServer
// for forward compatibility
type LobbyServer interface {
	GetMemberList(context.Context, *EmptyReq) (*GetMemberListRes, error)
	SetMemberData(context.Context, *SetMember) (*SetMemberRes, error)
	KickOutMember(context.Context, *KickOutMemberInfo) (*KickOutMemberRes, error)
	mustEmbedUnimplementedLobbyServer()
}

// UnimplementedLobbyServer must be embedded to have forward compatible implementations.
type UnimplementedLobbyServer struct {
}

func (UnimplementedLobbyServer) GetMemberList(context.Context, *EmptyReq) (*GetMemberListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberList not implemented")
}
func (UnimplementedLobbyServer) SetMemberData(context.Context, *SetMember) (*SetMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMemberData not implemented")
}
func (UnimplementedLobbyServer) KickOutMember(context.Context, *KickOutMemberInfo) (*KickOutMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickOutMember not implemented")
}
func (UnimplementedLobbyServer) mustEmbedUnimplementedLobbyServer() {}

// UnsafeLobbyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LobbyServer will
// result in compilation errors.
type UnsafeLobbyServer interface {
	mustEmbedUnimplementedLobbyServer()
}

func RegisterLobbyServer(s grpc.ServiceRegistrar, srv LobbyServer) {
	s.RegisterService(&Lobby_ServiceDesc, srv)
}

func _Lobby_GetMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GetMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_GetMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GetMemberList(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SetMemberData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SetMemberData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_SetMemberData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SetMemberData(ctx, req.(*SetMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_KickOutMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickOutMemberInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).KickOutMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_KickOutMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).KickOutMember(ctx, req.(*KickOutMemberInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Lobby_ServiceDesc is the grpc.ServiceDesc for Lobby service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lobby_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backendLobby.Lobby",
	HandlerType: (*LobbyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMemberList",
			Handler:    _Lobby_GetMemberList_Handler,
		},
		{
			MethodName: "SetMemberData",
			Handler:    _Lobby_SetMemberData_Handler,
		},
		{
			MethodName: "KickOutMember",
			Handler:    _Lobby_KickOutMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backendLobby.proto",
}
